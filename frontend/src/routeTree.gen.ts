/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ContractsImport } from './routes/contracts'
import { Route as R404Import } from './routes/404'
import { Route as IndexImport } from './routes/index'
import { Route as ContractsIndexImport } from './routes/contracts/index'
import { Route as ContractsCreateImport } from './routes/contracts/create'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ContractsRoute = ContractsImport.update({
  id: '/contracts',
  path: '/contracts',
  getParentRoute: () => rootRoute,
} as any)

const R404Route = R404Import.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContractsIndexRoute = ContractsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContractsRoute,
} as any)

const ContractsCreateRoute = ContractsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ContractsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/contracts': {
      id: '/contracts'
      path: '/contracts'
      fullPath: '/contracts'
      preLoaderRoute: typeof ContractsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/contracts/create': {
      id: '/contracts/create'
      path: '/create'
      fullPath: '/contracts/create'
      preLoaderRoute: typeof ContractsCreateImport
      parentRoute: typeof ContractsImport
    }
    '/contracts/': {
      id: '/contracts/'
      path: '/'
      fullPath: '/contracts/'
      preLoaderRoute: typeof ContractsIndexImport
      parentRoute: typeof ContractsImport
    }
  }
}

// Create and export the route tree

interface ContractsRouteChildren {
  ContractsCreateRoute: typeof ContractsCreateRoute
  ContractsIndexRoute: typeof ContractsIndexRoute
}

const ContractsRouteChildren: ContractsRouteChildren = {
  ContractsCreateRoute: ContractsCreateRoute,
  ContractsIndexRoute: ContractsIndexRoute,
}

const ContractsRouteWithChildren = ContractsRoute._addFileChildren(
  ContractsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/contracts': typeof ContractsRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/contracts/create': typeof ContractsCreateRoute
  '/contracts/': typeof ContractsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/contracts/create': typeof ContractsCreateRoute
  '/contracts': typeof ContractsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/contracts': typeof ContractsRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/contracts/create': typeof ContractsCreateRoute
  '/contracts/': typeof ContractsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/contracts'
    | '/dashboard'
    | '/login'
    | '/contracts/create'
    | '/contracts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/dashboard'
    | '/login'
    | '/contracts/create'
    | '/contracts'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/contracts'
    | '/dashboard'
    | '/login'
    | '/contracts/create'
    | '/contracts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  ContractsRoute: typeof ContractsRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  ContractsRoute: ContractsRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/404",
        "/contracts",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/contracts": {
      "filePath": "contracts.tsx",
      "children": [
        "/contracts/create",
        "/contracts/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/contracts/create": {
      "filePath": "contracts/create.tsx",
      "parent": "/contracts"
    },
    "/contracts/": {
      "filePath": "contracts/index.tsx",
      "parent": "/contracts"
    }
  }
}
ROUTE_MANIFEST_END */
