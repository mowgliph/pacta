generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  name                String
  email               String             @unique
  password            String
  roleId              String
  customPermissions   String?
  isActive            Boolean            @default(true)
  lastLogin           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  backups             Backup[]
  ownedContracts      Contract[]         @relation("OwnedByUser")
  createdContracts    Contract[]         @relation("CreatedByUser")
  contractAccess      ContractAccess[]
  uploadedDocuments   Document[]         @relation("UploadedDocuments")
  actions             HistoryRecord[]
  supplements         Supplement[]
  approvedSupplements Supplement[]       @relation("ApprovedByUser")
  role                Role               @relation(fields: [roleId], references: [id])
  notifications       UserNotification[]
  preferences         UserPreference?
}

model Role {
  id               String               @id @default(uuid())
  name             String               @unique
  description      String
  permissions      String
  isSystem         Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  allowedContracts ContractAccessRole[]
  users            User[]
}

model Contract {
  id                    String               @id @default(uuid())
  contractNumber        String               @unique
  signDate             DateTime
  signPlace            String
  
  // Identificación de las Partes
  type                 String                // Cliente/Proveedor
  companyName          String
  companyAddress       String
  nationality          String
  commercialAuth       String                // Autorización Comercial (MN)
  
  // Detalles bancarios
  bankAccount          String
  bankBranch           String
  bankAgency           String
  bankHolder           String
  bankCurrency         String                // CUP/MLC
  
  // Códigos de identificación
  reeupCode           String
  nit                 String
  contactPhones       String                 // Array almacenado como JSON
  
  // Representante legal
  repName             String
  repPosition         String
  repDocumentType     String
  repDocumentNumber   String
  repDocumentDate     DateTime
  
  // Objeto y obligaciones
  description         String
  providerObligations String                 // Array almacenado como JSON
  clientObligations   String                 // Array almacenado como JSON
  
  // Entrega y condiciones
  deliveryPlace       String
  deliveryTerm        String
  acceptanceProcedure String
  
  // Condiciones económicas
  value               Float
  currency            String                 // MN/MLC
  paymentMethod       String
  paymentTerm         String
  
  // Garantía y calidad
  warrantyTerm        String
  warrantyScope       String
  technicalStandards  String?
  
  // Reclamaciones y conflictos
  claimProcedure      String
  disputeResolution   String
  
  // Penalidades
  latePaymentInterest String
  breachPenalties     String
  
  // Avisos
  notificationMethods String                 // Array almacenado como JSON
  minimumNoticeTime   String
  
  // Duración
  startDate           DateTime
  endDate             DateTime
  extensionTerms      String
  earlyTerminationNotice String
  
  // Fuerza mayor
  forceMajeure        String
  
  // Metadatos del sistema
  status              String
  isRestricted        Boolean               @default(false)
  createdById         String
  ownerId             String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Relaciones
  owner               User                  @relation("OwnedByUser", fields: [ownerId], references: [id])
  createdBy           User                  @relation("CreatedByUser", fields: [createdById], references: [id])
  accessUsers         ContractAccess[]      @relation("ContractAccess")
  accessRoles         ContractAccessRole[]  @relation("ContractAccessRole")
  documents           Document[]
  history            HistoryRecord[]
  supplements        Supplement[]
  notifications      UserNotification[]
}

model Supplement {
  id            String          @id @default(uuid())
  contractId    String
  title         String
  description   String?
  documentUrl   String?
  changes       String
  effectiveDate DateTime
  isApproved    Boolean         @default(false)
  approvedById  String?
  approvedAt    DateTime?
  createdById   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  documents     Document[]
  history       HistoryRecord[]
  createdBy     User            @relation(fields: [createdById], references: [id])
  approvedBy    User?           @relation("ApprovedByUser", fields: [approvedById], references: [id])
  contract      Contract        @relation(fields: [contractId], references: [id])
}

model ContractAccess {
  id          String   @id @default(uuid())
  userId      String
  contractId  String
  permissions String
  canRead     Boolean  @default(false)
  canUpdate   Boolean  @default(false)
  canDelete   Boolean  @default(false)
  canApprove  Boolean  @default(false)
  canAssign   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contract    Contract @relation("ContractAccess", fields: [contractId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, contractId])
}

model ContractAccessRole {
  id         String   @id @default(uuid())
  roleId     String
  contractId String
  contract   Contract @relation("ContractAccessRole", fields: [contractId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])

  @@unique([roleId, contractId])
}

model HistoryRecord {
  id           String      @id @default(uuid())
  entityType   String
  entityId     String
  userId       String
  action       String
  details      String
  changes      String?
  description  String?
  timestamp    DateTime    @default(now())
  createdAt    DateTime    @default(now())
  contractId   String?
  supplementId String?
  supplement   Supplement? @relation(fields: [supplementId], references: [id])
  contract     Contract?   @relation(fields: [contractId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Document {
  id           String      @id @default(uuid())
  name         String
  fileName     String
  fileType     String
  fileSize     Int
  filePath     String
  description  String?
  tags         String?
  isPublic     Boolean     @default(false)
  contractId   String?
  supplementId String?
  uploadedById String
  uploadedAt   DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  downloads    Int         @default(0)
  views        Int         @default(0)
  uploadedBy   User        @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  supplement   Supplement? @relation(fields: [supplementId], references: [id])
  contract     Contract?   @relation(fields: [contractId], references: [id])
}

model DocumentActivity {
  id         String   @id @default(uuid())
  documentId String
  userId     String
  action     String
  ipAddress  String?
  timestamp  DateTime @default(now())
}

model Backup {
  id                String   @id @default(uuid())
  fileName          String
  filePath          String
  fileSize          Int
  createdById       String
  createdAt         DateTime @default(now())
  note              String?
  emailNotification Boolean  @default(false)
  isAutomatic       Boolean  @default(true)
  createdBy         User     @relation(fields: [createdById], references: [id])
}

model UserPreference {
  id                   String   @id @default(uuid())
  userId               String   @unique
  theme                String   @default("light")
  notificationsEnabled Boolean  @default(true)
  notificationDays     Int      @default(30)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailConfig {
  id        String   @id @default(uuid())
  host      String
  port      Int
  username  String
  password  String
  secure    Boolean  @default(true)
  from      String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailTemplate {
  id        String   @id @default(uuid())
  name      String   @unique
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailLog {
  id           String   @id @default(uuid())
  to           String
  subject      String
  body         String
  status       String
  errorMessage String?
  createdAt    DateTime @default(now())
}

model UserNotification {
  id         String    @id @default(uuid())
  userId     String
  title      String
  message    String
  type       String
  isRead     Boolean   @default(false)
  contractId String?
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  contract   Contract? @relation(fields: [contractId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}
