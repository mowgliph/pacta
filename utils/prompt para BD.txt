@backend @frontend   propongo una estructura de base de datos en SQLite que cumpla con los requisitos identificados. La estructura incluye tablas para contratos, partes, documentos, notificaciones y usuarios, con relaciones que permitan un CRUD completo, notificaciones de vencimiento y clasificación de tipos de contratos y denominadores (cliente/proveedor).
Tablas Principales
Contratos
id (INTEGER PRIMARY KEY): Identificador único.

numero (TEXT): Número del contrato (e.g., "____ / 20__").

fecha_inicio (DATE): Fecha de firma o entrada en vigor.

objeto (TEXT): Descripción del objeto del contrato.

tipo (TEXT): Tipo de contrato (e.g., "servicio", "compra y venta", "mixto").

denominador (TEXT): "cliente" o "proveedor" según el rol principal en el contrato.

vigencia (INTEGER): Duración en días (e.g., 1095 para 3 años).

fecha_fin (DATE): Fecha de vencimiento (calculada o ingresada).

estado (TEXT): "activo", "vencido", "terminado".

Partes
id (INTEGER PRIMARY KEY): Identificador único.

nombre (TEXT): Nombre de la parte.

domicilio (TEXT): Domicilio legal.

municipio (TEXT): Municipio.

provincia (TEXT): Provincia.

nacionalidad (TEXT): Nacionalidad.

autorizacion_comercial (TEXT): Autorización comercial (si aplica).

cuenta_bancaria_cup (TEXT): Cuenta en CUP.

cuenta_bancaria_mlc (TEXT): Cuenta en MLC (opcional).

codigo_reeup (TEXT): Código REEUP.

nit (TEXT): NIT.

telefonos (TEXT): Teléfonos de contacto.

representante (TEXT): Nombre del representante.

Contrato_Partes (Relación muchos a muchos)
contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

parte_id (INTEGER): Referencia a Partes (FOREIGN KEY).

rol (TEXT): "prestador" o "cliente" en este contrato específico.

Obligaciones
id (INTEGER PRIMARY KEY): Identificador único.

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

parte_id (INTEGER): Referencia a Partes (FOREIGN KEY).

descripcion (TEXT): Descripción de la obligación.

estado (TEXT): "pendiente", "cumplida", "incumplida".

Entregas
id (INTEGER PRIMARY KEY): Identificador único.

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

lugar (TEXT): Lugar de entrega.

plazo (DATE): Fecha límite de entrega.

condiciones (TEXT): Condiciones específicas.

Pagos
id (INTEGER PRIMARY KEY): Identificador único.

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

monto (REAL): Monto a pagar.

moneda (TEXT): "CUP" o "MLC".

forma_pago (TEXT): "transferencia" o "cheque".

plazo_pago (DATE): Fecha límite de pago.

estado (TEXT): "pendiente", "pagado".

Garantias
id (INTEGER PRIMARY KEY): Identificador único.

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

descripcion (TEXT): Detalles de la garantía.

plazo (DATE): Fecha de fin de la garantía.

Notificaciones
id (INTEGER PRIMARY KEY): Identificador único.

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

tipo (TEXT): "vencimiento", "pago pendiente", "incumplimiento".

fecha_envio (DATE): Fecha programada para enviar la notificación.

estado (TEXT): "pendiente", "enviada".

Documentos
id (INTEGER PRIMARY KEY): Identificador único.

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

nombre (TEXT): Nombre del documento.

ruta (TEXT): Ruta en el sistema de archivos.

tipo (TEXT): "PDF", "Word", etc.

version (INTEGER): Número de versión (para historial).

Usuarios
id (INTEGER PRIMARY KEY): Identificador único.

nombre (TEXT): Nombre del usuario.

email (TEXT): Correo electrónico.

rol (TEXT): "administrador", "editor", "visor".

contraseña (TEXT): Contraseña cifrada.

Permisos
id (INTEGER PRIMARY KEY): Identificador único.

usuario_id (INTEGER): Referencia a Usuarios (FOREIGN KEY).

contrato_id (INTEGER): Referencia a Contratos (FOREIGN KEY).

nivel_acceso (TEXT): "lectura", "escritura", "administración".

Relaciones
Contratos  Partes: Muchos a muchos mediante Contrato_Partes.

Contratos → Obligaciones, Entregas, Pagos, Garantias, Notificaciones, Documentos: Uno a muchos.

Usuarios  Permisos: Uno a muchos, vinculando usuarios con contratos específicos.

Consideraciones Específicas
Notificaciones para vencimientos: La tabla Notificaciones permite programar alertas automáticas basadas en fecha_fin de los contratos o plazo_pago de los pagos. El backend puede usar un scheduler (e.g., node-schedule) para verificar diariamente y enviar notificaciones cuando fecha_envio coincida con la fecha actual.

Tipos de contratos: El campo tipo en Contratos soporta valores como "servicio", "compra y venta", "mixto". Si necesitas más detalles, podrías crear una tabla Tipos_Contratos con id y descripcion.

Denominador (cliente/proveedor): El campo denominador en Contratos indica si el contrato se refiere principalmente a un cliente o proveedor. La tabla Contrato_Partes detalla los roles específicos de cada parte.

CRUD completo: Todas las tablas soportan operaciones de creación, lectura, actualización y eliminación, restringidas por los permisos definidos en Permisos.

Prisma ORM: La estructura es compatible con Prisma. 

Analiza la estructuracion completa del projecto PACTA  del backend 

para actualizar la informacion de la base de datos y modificar cada archivo que corresponda y se vicule con el. Verifica antes de hacer cualquioer edicion los archivos actuales y su codigo actual. Luego modifica y/o agrega codigo segun sea conveniente. Manten el mismo enfoque y consistencia de codigo.  Para realizar el peso ed la tarea divide las acciones en partes por partes. Asi tendras mejor exito.