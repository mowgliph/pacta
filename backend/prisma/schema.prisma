// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  firstName    String
  lastName     String
  role         Role      @default(USER)
  status       UserStatus @default(ACTIVE)
  profileImage String?
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  posts        Post[]
  comments     Comment[]
  likes        Like[]
}

// Post model
model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  
  // Relations
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
}

// Comment model
model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  
  // Relations
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

// Like model
model Like {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String

  // Unique constraint to prevent duplicate likes
  @@unique([userId, postId])
}

// Enum for user roles
enum Role {
  ADMIN
  USER
  GUEST
}

// Enum for user status
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
