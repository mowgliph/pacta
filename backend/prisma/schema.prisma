// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  RA                // Usuario del desarrollador
  ADMIN             // Usuario administrativo del cliente
  MANAGER           // Gestor con permisos amplios
  USER              // Usuario estándar
  VIEWER            // Solo lectura
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ContractStatus {
  DRAFT              // Borrador
  ACTIVE             // Activo/Vigente
  EXPIRED            // Vencido
  TERMINATED         // Terminado anticipadamente
  PENDING_RENEWAL    // Pendiente de renovación
  RENEWED            // Renovado
  ARCHIVED           // Archivado
}

enum DocumentType {
  CONTRACT
  AMENDMENT
  ANNEX
  CERTIFICATE
  OTHER
}

// User model - Usuarios del sistema
model User {
  id                String          @id @default(uuid())
  email             String          @unique
  password          String
  firstName         String
  lastName          String
  role              Role            @default(USER)
  status            UserStatus      @default(ACTIVE)
  isSystemUser      Boolean         @default(false)  // Para identificar usuarios predefinidos (RA y Admin)
  profileImage      String?
  lastLogin         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  department        Department?     @relation(fields: [departmentId], references: [id])
  departmentId      String?

  // Relations
  contracts         Contract[]      // Contratos creados por el usuario
  notifications     Notification[]  // Notificaciones recibidas
  activities        Activity[]      // Actividades realizadas
  accessLogs        AccessLog[]     // Registros de acceso
  permisos          Permiso[]       // Permisos específicos
}

// Company model - Empresas relacionadas con los contratos
model Company {
  id                String          @id @default(uuid())
  name              String
  taxId             String?         @unique  // Identificación fiscal
  email             String?
  phone             String?
  address           String?
  website           String?
  logo              String?
  industry          String?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  // Relations
  contracts         Contract[]      // Contratos relacionados con la empresa
  departments       Department[]    // Departamentos de la empresa
}

// Department model - Departamentos dentro de una empresa
model Department {
  id                String          @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  company           Company         @relation(fields: [companyId], references: [id])
  companyId         String
  users             User[]          // Usuarios asignados al departamento
  contracts         Contract[]      // Contratos gestionados por el departamento
}

// Contract model - Core model for PACTA
model Contract {
  id                String          @id @default(uuid())
  numero            String          @unique
  fechaInicio       DateTime        @map("fecha_inicio")
  objeto            String
  tipo              String
  denominador       String
  vigencia          Int
  fechaFin          DateTime?       @map("fecha_fin")
  estado            ContractStatus  @default(ACTIVE)
  title             String
  description       String?
  fileUrl           String?         // URL del documento PDF/DOCX
  fileSize          Int?            // Tamaño del archivo en bytes
  fileMimeType      String?         // Tipo MIME del archivo
  amount            Float?          // Valor monetario del contrato
  currency          String?         // Moneda (USD, EUR, etc.)
  notes             String?         // Notas adicionales
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  // Relations
  author            User            @relation(fields: [authorId], references: [id])
  authorId          String
  company           Company         @relation(fields: [companyId], references: [id])
  companyId         String
  department        Department?     @relation(fields: [departmentId], references: [id])
  departmentId      String?
  partes            ContratoParte[] // Partes involucradas
  obligaciones      Obligacion[]    // Obligaciones del contrato
  entregas          Entrega[]       // Entregas programadas
  pagos             Pago[]          // Pagos asociados
  garantias         Garantia[]      // Garantías del contrato
  notificaciones    Notification[]  // Notificaciones asociadas
  documentos        Documento[]     // Documentos relacionados
  permisos          Permiso[]       // Permisos de acceso
  activities        Activity[]      // Actividades asociadas

  @@index([numero])
  @@index([fechaInicio])
  @@index([estado])
}

// Parte model - Partes involucradas en contratos
model Parte {
  id                  String          @id @default(uuid())
  nombre              String
  domicilio           String
  municipio           String
  provincia           String
  nacionalidad        String
  autorizacionComercial String?       @map("autorizacion_comercial")
  cuentaBancariaCup   String          @map("cuenta_bancaria_cup")
  cuentaBancariaMlc   String?         @map("cuenta_bancaria_mlc")
  codigoReeup         String          @map("codigo_reeup")
  nit                 String
  telefonos           String
  representante       String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  contratos           ContratoParte[] // Contratos asociados

  @@index([codigoReeup])
  @@index([nit])
}

// ContratoParte model - Relación entre Contrato y Parte
model ContratoParte {
  id          String      @id @default(uuid())
  contratoId  String      @map("contrato_id")
  parteId     String      @map("parte_id")
  rol         String
  createdAt   DateTime    @default(now())

  // Relations
  contrato    Contract    @relation(fields: [contratoId], references: [id])
  parte       Parte       @relation(fields: [parteId], references: [id])

  @@unique([contratoId, parteId])
}

// Obligacion model - Obligaciones de las partes
model Obligacion {
  id          String      @id @default(uuid())
  contratoId  String      @map("contrato_id")
  parteId     String      @map("parte_id")
  descripcion String
  estado      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  contrato    Contract    @relation(fields: [contratoId], references: [id])
  parte       Parte       @relation(fields: [parteId], references: [id])
}

// Entrega model - Entregas programadas
model Entrega {
  id          String      @id @default(uuid())
  contratoId  String      @map("contrato_id")
  lugar       String
  plazo       DateTime
  condiciones String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  contrato    Contract    @relation(fields: [contratoId], references: [id])
}

// Pago model - Pagos asociados
model Pago {
  id          String      @id @default(uuid())
  contratoId  String      @map("contrato_id")
  monto       Float
  moneda      String
  formaPago   String      @map("forma_pago")
  plazoPago   DateTime    @map("plazo_pago")
  estado      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  contrato    Contract    @relation(fields: [contratoId], references: [id])
}

// Garantia model - Garantías del contrato
model Garantia {
  id          String      @id @default(uuid())
  contratoId  String      @map("contrato_id")
  descripcion String
  plazo       DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  contrato    Contract    @relation(fields: [contratoId], references: [id])
}

// Documento model - Documentos relacionados
model Documento {
  id          String      @id @default(uuid())
  contratoId  String      @map("contrato_id")
  nombre      String
  ruta        String
  tipo        DocumentType
  version     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  contrato    Contract    @relation(fields: [contratoId], references: [id])
}

// Permiso model - Permisos de acceso
model Permiso {
  id          String      @id @default(uuid())
  usuarioId   String      @map("usuario_id")
  contratoId  String      @map("contrato_id")
  nivelAcceso String      @map("nivel_acceso")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  usuario     User        @relation(fields: [usuarioId], references: [id])
  contrato    Contract    @relation(fields: [contratoId], references: [id])
}

// Notification model - Notificaciones del sistema
model Notification {
  id                String             @id @default(uuid())
  type              String             // Tipo de notificación
  title             String
  message           String
  fechaEnvio        DateTime           @map("fecha_envio")
  estado            String
  isRead            Boolean            @default(false)
  createdAt         DateTime           @default(now())
  scheduledFor      DateTime?          // Para notificaciones programadas
  sentAt            DateTime?          // Cuando se envió realmente
  readAt            DateTime?          // Cuando se marcó como leída

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  contrato          Contract?          @relation(fields: [contratoId], references: [id])
  contratoId        String?
}

// Activity model - Registro de actividades
model Activity {
  id                String             @id @default(uuid())
  action            String             // Acción realizada
  description       String?            // Descripción de la actividad
  ipAddress         String?            // Dirección IP
  userAgent         String?            // User-Agent del navegador
  createdAt         DateTime           @default(now())

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  contrato          Contract?          @relation(fields: [contratoId], references: [id])
  contratoId        String?
}

// AccessLog model - Registro de accesos
model AccessLog {
  id                String             @id @default(uuid())
  action            String             // Login, logout, failed attempt
  ipAddress         String?            // Dirección IP
  userAgent         String?            // User-Agent del navegador
  success           Boolean            @default(true)
  failReason        String?            // Razón del fallo si success=false
  createdAt         DateTime           @default(now())

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  userId            String
}

// SystemSetting model - Configuraciones globales
model SystemSetting {
  id                String             @id @default(uuid())
  key               String             @unique
  value             String
  description       String?
  type              String             @default("string") // string, number, boolean, json
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// Backup model - Sistema de guardado
model Backup {
  id        String   @id @default(uuid())
  filename  String
  type      String   // 'auto' | 'manual'
  size      Int
  iv        String?  // Vector de inicialización para cifrado
  createdAt DateTime @default(now())
  duration  Int      // Duración en ms
}