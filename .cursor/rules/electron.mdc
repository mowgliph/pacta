---
description: 
globs: 
alwaysApply: true
---
# Documentación Oficial: Comunicación IPC y Seguridad en Electron

## 1. Comunicación IPC (Inter-Process Communication)

### 1.1 Conceptos Básicos

En Electron, las aplicaciones constan de dos tipos de procesos principales:
- **Proceso Principal (Main)**: Controla el ciclo de vida de la aplicación, acceso a APIs nativas y sistemas del SO
- **Proceso de Renderizado (Renderer)**: Maneja la interfaz de usuario y todo lo relacionado con la interacción del usuario

La comunicación entre estos procesos se realiza mediante el sistema IPC (Inter-Process Communication) de Electron, que permite el intercambio seguro de mensajes y datos.

### 1.2 Métodos de Comunicación IPC

#### 1.2.1 Comunicación desde Renderer hacia Main
```typescript
// En el proceso renderer
window.electron.invoke('canal', datos).then((resultado) => {
  console.log(resultado);
});

// En el proceso main
ipcMain.handle('canal', async (event, datos) => {
  // Procesar datos
  return resultado;
});
```

#### 1.2.2 Comunicación desde Main hacia Renderer
```typescript
// En el proceso main
mainWindow.webContents.send('canal', datos);

// En el proceso renderer
window.electron.receive('canal', (datos) => {
  console.log(datos);
});
```

### 1.3 Buenas Prácticas para IPC

1. **Utilizar invoke/handle para comunicación bidireccional**:
   - `ipcRenderer.invoke` / `ipcMain.handle` (basado en promesas) es preferible sobre `send`/`on`
   - Proporciona comunicación asíncrona con manejo de errores nativo

2. **Validar todos los datos transmitidos**:
   - Usar bibliotecas como Zod para validar esquemas de datos
   - Nunca confiar en los datos entrantes sin validación

3. **Implementar un sistema de tipos para canales IPC**:
   - Definir interfaces TypeScript para los datos transmitidos
   - Usar constantes para nombres de canales

4. **Manejar errores adecuadamente**:
   - Capturar y registrar errores en ambos procesos
   - Enviar respuestas de error estructuradas al renderer

## 2. Seguridad en Electron

### 2.1 Principios Fundamentales

La seguridad en Electron se basa en varios principios clave:

1. **Aislamiento de Procesos**: Segregar el código con diferentes privilegios
2. **Principio de Mínimo Privilegio**: Otorgar solo los permisos necesarios
3. **Validación de Entrada**: Validar todos los datos ingresados
4. **Aislamiento de Contexto**: Evitar que el código malicioso acceda a APIs sensibles

### 2.2 Configuraciones de Seguridad Críticas

#### 2.2.1 Configuración de BrowserWindow
```typescript
const win = new BrowserWindow({
  webPreferences: {
    nodeIntegration: false,           // Crítico: Deshabilitar integración de Node
    contextIsolation: true,           // Crítico: Aislar el contexto
    sandbox: true,                    // Habilitar sandbox
    preload: path.join(__dirname, 'preload.js'), // Script de precarga
    enableRemoteModule: false,        // Deshabilitar módulo remoto
    webSecurity: true                 // Mantener seguridad web habilitada
  }
});
```

#### 2.2.2 Archivo de Precarga (preload.js)
```typescript
import { contextBridge, ipcRenderer } from 'electron';

// Exponer APIs específicas y seguras al renderer
contextBridge.exposeInMainWorld('electron', {
  // Solo exponer funcionalidades específicas
  invoke: (channel, data) => {
    // Lista blanca de canales permitidos
    const validChannels = ['canal1', 'canal2', 'canal3'];
    if (validChannels.includes(channel)) {
      return ipcRenderer.invoke(channel, data);
    }
    return Promise.reject(new Error(`Canal no permitido: ${channel}`));
  },
  
  receive: (channel, func) => {
    const validChannels = ['notificacion1', 'notificacion2'];
    if (validChannels.includes(channel)) {
      // Eliminar los listeners antiguos para evitar fugas de memoria
      ipcRenderer.removeAllListeners(channel);
      // Función callback simplificada que omite el evento
      ipcRenderer.on(channel, (_, ...args) => func(...args));
    }
  }
});
```

### 2.3 Mejores Prácticas de Seguridad

1. **Content Security Policy (CSP)**:
   ```typescript
   // En main process
   session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
     callback({
       responseHeaders: {
         ...details.responseHeaders,
         'Content-Security-Policy': ["default-src 'self'; script-src 'self'"]
       }
     });
   });
   ```

2. **Validación de URLs y Navegación**:
   ```typescript
   // Antes de abrir enlaces externos
   app.on('web-contents-created', (_, contents) => {
     contents.on('will-navigate', (event, navigationUrl) => {
       const parsedUrl = new URL(navigationUrl);
       
       // Lista de dominios permitidos
       const allowedDomains = ['example.com', 'api.example.com'];
       
       if (!allowedDomains.includes(parsedUrl.hostname)) {
         event.preventDefault(); // Bloquear navegación
       }
     });
     
     // Controlar apertura de ventanas
     contents.setWindowOpenHandler(({ url }) => {
       // Validar URL antes de permitir la apertura
       return { action: 'deny' }; // O permitir si es segura
     });
   });
   ```

3. **Validación de Datos en Canales IPC**:
   ```typescript
   // Usando Zod para validación
   import { z } from 'zod';

   const esquemaDatos = z.object({
     id: z.number(),
     nombre: z.string().min(1).max(100),
     opciones: z.array(z.string())
   });

   ipcMain.handle('operacion:datos', async (_, datos) => {
     try {
       // Validar datos entrantes
       const datosValidados = esquemaDatos.parse(datos);
       
       // Procesar solo después de validar
       return procesarDatos(datosValidados);
     } catch (error) {
       console.error('Error de validación:', error);
       throw new Error('Datos inválidos proporcionados');
     }
   });
   ```

4. **Protección contra Ataques de Inyección**:
   - Nunca usar `eval()` o ejecutar strings como código
   - No usar `new Function()` con entrada no confiable
   - Escapar datos de usuario antes de insertarlos en HTML/SQL

## 3. Arquitectura Recomendada para Seguridad IPC

### 3.1 Estructura de Carpetas
```
src/
├── main/
│   ├── index.ts                 # Punto de entrada del proceso principal
│   ├── preload.ts               # Script de precarga
│   ├── ipc/
│   │   ├── handlers/            # Manejadores IPC agrupados por dominio
│   │   │   ├── app.ts
│   │   │   ├── files.ts
│   │   │   └── users.ts
│   │   ├── schemas/             # Esquemas de validación
│   │   │   ├── app-schemas.ts
│   │   │   └── file-schemas.ts
│   │   └── channels.ts          # Definición de canales permitidos
│   └── security/
│       └── csp.ts               # Configuración de CSP
├── renderer/
│   ├── hooks/
│   │   └── use-ipc.ts           # Hook para simplificar llamadas IPC
│   └── utils/
│       └── ipc-client.ts        # Cliente IPC tipado
└── shared/
    └── types/
        └── ipc-types.ts         # Tipos compartidos para IPC
```

### 3.2 Implementación de Cliente IPC Tipado
```typescript
// shared/types/ipc-types.ts
export interface IPCChannels {
  'usuario:autenticar': {
    request: { usuario: string, password: string };
    response: { success: boolean, token?: string, error?: string };
  };
  'documento:guardar': {
    request: { id: string, contenido: string };
    response: { success: boolean, error?: string };
  };
}

// renderer/utils/ipc-client.ts
import type { IPCChannels } from '../../shared/types/ipc-types';

export function ipcInvoke<C extends keyof IPCChannels>(
  channel: C,
  data: IPCChannels[C]['request']
): Promise<IPCChannels[C]['response']> {
  return window.electron.invoke(channel, data);
}
```

## 4. Referencias Oficiales

- [Documentación oficial de Electron sobre IPC](https://www.electronjs.org/docs/latest/tutorial/ipc)
- [Guía de seguridad de Electron](https://www.electronjs.org/docs/latest/tutorial/security)
- [Buenas prácticas para aplicaciones en producción](https://www.electronjs.org/docs/latest/tutorial/security#checklist-security-recommendations)

## 5. Consideraciones Adicionales

1. **Actualizaciones Regulares**: Mantener Electron actualizado para recibir parches de seguridad
2. **Firma de Código**: Firmar la aplicación para garantizar su autenticidad
3. **Manejo de Excepciones**: Implementar manejo global de excepciones no capturadas
4. **Logging Seguro**: Registrar todos los eventos de seguridad para auditoría

5. **Verificación de Integridad**: Validar la integridad de recursos cargados desde el sistema de archivos 